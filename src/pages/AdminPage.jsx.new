import React, { useState, useEffect } from 'react';
import { useAuth } from '../hooks/useAuth';
import AdminService from '../services/AdminService';
import { Button, Pagination, Spinner, ConfirmDialog, RoleBadge } from '../components/ui';
import ErrorAlert from '../components/ui/ErrorAlert';
import DashboardStats from '../components/admin/DashboardStats';
import TabNav from '../components/admin/TabNav';
import RecentItems from '../components/admin/RecentItems';
import PropTypes from 'prop-types';

const AdminPage = () => {
  const { user } = useAuth();
  const [activeTab, setActiveTab] = useState('users');
  const [users, setUsers] = useState([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);
  const [stats, setStats] = useState({
    totalUsers: 0,
    totalPosts: 0,
    totalComments: 0,
    postsThisMonth: 0
  });
  const [recentPosts, setRecentPosts] = useState([]);
  const [recentComments, setRecentComments] = useState([]);
  const [pagination, setPagination] = useState({
    page: 0,
    size: 10,
    totalElements: 0,
    totalPages: 0,
    sort: 'name,asc'
  });

  // State for confirmations
  const [deleteConfirmation, setDeleteConfirmation] = useState({
    isOpen: false,
    userId: null,
    userName: '',
    isLoading: false
  });

  const [roleConfirmation, setRoleConfirmation] = useState({
    isOpen: false,
    userId: null,
    userName: '',
    currentRole: '',
    newRole: '',
    isLoading: false
  });

  // Load data on initial render
  useEffect(() => {
    loadUsers();
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [pagination.page, pagination.size, pagination.sort]);

  useEffect(() => {
    loadDashboardStats();
    loadRecentPosts();
    loadRecentComments();
  }, []);

  // API functions
  const loadUsers = async () => {
    try {
      setLoading(true);
      setError(null);
      
      const { page, size, sort } = pagination;
      const data = await AdminService.getUsers({ page, size, sort });
      
      setUsers(data.content || []);
      setPagination(prev => ({
        ...prev,
        totalElements: data.totalElements || 0,
        totalPages: data.totalPages || 0
      }));
    } catch (err) {
      console.error('Failed to fetch users:', err);
      setError('Failed to load users. Please try again.');
    } finally {
      setLoading(false);
    }
  };
  
  const loadDashboardStats = async () => {
    try {
      const dashboardStats = await AdminService.getDashboardStats();
      setStats(dashboardStats);
    } catch (err) {
      console.error('Failed to fetch dashboard stats:', err);
    }
  };
  
  const loadRecentPosts = async () => {
    try {
      const posts = await AdminService.getRecentPosts();
      setRecentPosts(posts);
    } catch (err) {
      console.error('Failed to fetch recent posts:', err);
    }
  };
  
  const loadRecentComments = async () => {
    try {
      const comments = await AdminService.getRecentComments({
        page: 0,
        size: 5,
        sort: 'timeCreated,desc'
      });
      setRecentComments(comments);
    } catch (err) {
      console.error('Failed to fetch recent comments:', err);
    }
  };

  // Handlers
  const handlePageChange = (newPage) => {
    setPagination(prev => ({ ...prev, page: newPage }));
  };

  // Delete user functions
  const openDeleteConfirmation = (userId, userName) => {
    setDeleteConfirmation({
      isOpen: true,
      userId,
      userName,
      isLoading: false
    });
  };

  const closeDeleteConfirmation = () => {
    setDeleteConfirmation({
      isOpen: false,
      userId: null,
      userName: '',
      isLoading: false
    });
  };

  const handleDeleteUser = async () => {
    const { userId } = deleteConfirmation;
    
    try {
      setDeleteConfirmation(prev => ({ ...prev, isLoading: true }));
      await AdminService.deleteUser(userId);
      
      setUsers(prev => prev.filter(user => user.id !== userId));
      closeDeleteConfirmation();
    } catch (err) {
      console.error('Failed to delete user:', err);
      setError('Failed to delete user. Please try again.');
      setDeleteConfirmation(prev => ({ ...prev, isLoading: false }));
    }
  };

  // Role change functions
  const openRoleConfirmation = (userId, userName, currentRole, newRole) => {
    setRoleConfirmation({
      isOpen: true,
      userId,
      userName,
      currentRole,
      newRole,
      isLoading: false
    });
  };

  const closeRoleConfirmation = () => {
    setRoleConfirmation({
      isOpen: false,
      userId: null,
      userName: '',
      currentRole: '',
      newRole: '',
      isLoading: false
    });
  };

  const handleRoleChange = async () => {
    const { userId, newRole } = roleConfirmation;
    
    try {
      setRoleConfirmation(prev => ({ ...prev, isLoading: true }));
      const updatedUser = await AdminService.updateUserRole(userId, newRole);
      
      setUsers(prev => prev.map(user => 
        user.id === userId ? { ...user, role: updatedUser.role || newRole } : user
      ));
      closeRoleConfirmation();
    } catch (err) {
      console.error('Failed to update user role:', err);
      setError('Failed to update user role. Please try again.');
      setRoleConfirmation(prev => ({ ...prev, isLoading: false }));
    }
  };

  const renderRoleButton = (userId, userName, currentRole, newRole, label) => {
    if (currentRole?.toUpperCase() === newRole) {
      return null;
    }

    if (user?.id === userId) {
      return null;
    }

    return (
      <Button
        variant="secondary"
        size="sm"
        onClick={() => openRoleConfirmation(userId, userName, currentRole, newRole)}
        className="mr-1 text-xs"
      >
        {label}
      </Button>
    );
  };

  // Sorting
  const handleSort = (field) => {
    const currentSort = pagination.sort;
    const [currentField, currentDirection] = currentSort.split(',');
    
    let newSort;
    if (currentField === field) {
      newSort = `${field},${currentDirection === 'asc' ? 'desc' : 'asc'}`;
    } else {
      newSort = `${field},asc`;
    }
    
    setPagination(prev => ({ ...prev, sort: newSort }));
  };

  const getSortIndicator = (field) => {
    const [currentField, currentDirection] = pagination.sort.split(',');
    if (currentField !== field) return null;
    
    return currentDirection === 'asc' 
      ? <span className="ml-1">↑</span> 
      : <span className="ml-1">↓</span>;
  };

  // Tabs
  const tabs = [
    { id: 'users', label: 'Users', icon: <UsersIcon className="w-4 h-4 inline" /> },
    { id: 'posts', label: 'Recent Posts', icon: <DocumentsIcon className="w-4 h-4 inline" /> },
    { id: 'comments', label: 'Recent Comments', icon: <CommentsIcon className="w-4 h-4 inline" /> }
  ];

  return (
    <div className="p-4">
      <h1 className="text-3xl font-bold mb-6">Admin Dashboard</h1>
      
      {error && (
        <div className="mb-4">
          <ErrorAlert 
            message={error}
            onClose={() => setError(null)} 
          />
        </div>
      )}
      
      <div className="grid grid-cols-1 lg:grid-cols-3 gap-6">
        {/* Left column: Stats */}
        <div className="col-span-1">
          <h2 className="text-xl font-semibold mb-4">Overview</h2>
          <DashboardStats stats={stats} />
        </div>
        
        {/* Right column: Tables */}
        <div className="lg:col-span-2">
          <div className="bg-white dark:bg-gray-800 rounded-lg shadow mb-6">
            <TabNav 
              tabs={tabs} 
              activeTab={activeTab} 
              onTabChange={setActiveTab} 
            />
          </div>
          
          <div className="bg-white dark:bg-gray-800 rounded-lg shadow p-4">
            {activeTab === 'users' && (
              <>
                <div className="overflow-x-auto">
                  <table className="min-w-full divide-y divide-gray-200 dark:divide-gray-700">
                    <thead>
                      <tr>
                        <th 
                          onClick={() => handleSort('id')}
                          className="px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase cursor-pointer"
                        >
                          ID {getSortIndicator('id')}
                        </th>
                        <th 
                          onClick={() => handleSort('name')}
                          className="px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase cursor-pointer"
                        >
                          Name {getSortIndicator('name')}
                        </th>
                        <th 
                          onClick={() => handleSort('email')}
                          className="px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase cursor-pointer"
                        >
                          Email {getSortIndicator('email')}
                        </th>
                        <th 
                          onClick={() => handleSort('role')}
                          className="px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase cursor-pointer"
                        >
                          Role {getSortIndicator('role')}
                        </th>
                        <th className="px-4 py-3 text-right text-xs font-medium text-gray-500 uppercase">
                          Actions
                        </th>
                      </tr>
                    </thead>
                    <tbody className="divide-y divide-gray-200 dark:divide-gray-700">
                      {loading ? (
                        <tr>
                          <td colSpan="5" className="px-4 py-4 text-center">
                            <Spinner size="md" />
                          </td>
                        </tr>
                      ) : users.length === 0 ? (
                        <tr>
                          <td colSpan="5" className="px-4 py-4 text-center text-gray-500">
                            No users found.
                          </td>
                        </tr>
                      ) : (
                        users.map(user => (
                          <tr key={user.id}>
                            <td className="px-4 py-4 whitespace-nowrap text-sm text-gray-500">
                              {user.id}
                            </td>
                            <td className="px-4 py-4 whitespace-nowrap text-sm font-medium">
                              {user.name}
                            </td>
                            <td className="px-4 py-4 whitespace-nowrap text-sm text-gray-500">
                              {user.email}
                            </td>
                            <td className="px-4 py-4 whitespace-nowrap">
                              <RoleBadge role={user.role} />
                            </td>
                            <td className="px-4 py-4 whitespace-nowrap text-right text-sm">
                              <div className="flex justify-end space-x-2">
                                {renderRoleButton(user.id, user.name, user.role, 'ADMIN', 'Make Admin')}
                                {renderRoleButton(user.id, user.name, user.role, 'AUTHOR', 'Make Author')}
                                {renderRoleButton(user.id, user.name, user.role, 'READER', 'Make Reader')}
                                
                                {user.id !== user?.id && (
                                  <Button
                                    variant="danger"
                                    size="sm"
                                    onClick={() => openDeleteConfirmation(user.id, user.name)}
                                    className="text-xs"
                                  >
                                    Delete
                                  </Button>
                                )}
                              </div>
                            </td>
                          </tr>
                        ))
                      )}
                    </tbody>
                  </table>
                </div>
                
                {!loading && pagination.totalPages > 1 && (
                  <div className="mt-4">
                    <Pagination
                      currentPage={pagination.page}
                      totalPages={pagination.totalPages}
                      onPageChange={handlePageChange}
                    />
                  </div>
                )}
              </>
            )}
            
            {activeTab === 'posts' && (
              <RecentItems 
                title="Recent Posts" 
                items={recentPosts} 
                type="posts"
              />
            )}
            
            {activeTab === 'comments' && (
              <RecentItems 
                title="Recent Comments" 
                items={recentComments} 
                type="comments"
              />
            )}
          </div>
        </div>
      </div>

      <ConfirmDialog
        isOpen={deleteConfirmation.isOpen}
        onClose={closeDeleteConfirmation}
        onConfirm={handleDeleteUser}
        title="Delete User"
        message={`Are you sure you want to delete ${deleteConfirmation.userName}? This action cannot be undone.`}
        confirmText="Delete User"
        cancelText="Cancel"
        isLoading={deleteConfirmation.isLoading}
      />

      <ConfirmDialog
        isOpen={roleConfirmation.isOpen}
        onClose={closeRoleConfirmation}
        onConfirm={handleRoleChange}
        title="Change User Role"
        message={`Are you sure you want to change ${roleConfirmation.userName}'s role from ${roleConfirmation.currentRole} to ${roleConfirmation.newRole}?`}
        confirmText="Change Role"
        cancelText="Cancel"
        isLoading={roleConfirmation.isLoading}
      />
    </div>
  );
};

// Icon components
const UsersIcon = ({ className }) => (
  <svg xmlns="http://www.w3.org/2000/svg" className={className} fill="none" viewBox="0 0 24 24" stroke="currentColor">
    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 4.354a4 4 0 110 5.292M15 21H3v-1a6 6 0 0112 0v1zm0 0h6v-1a6 6 0 00-9-5.197M13 7a4 4 0 11-8 0 4 4 0 018 0z" />
  </svg>
);

const DocumentsIcon = ({ className }) => (
  <svg xmlns="http://www.w3.org/2000/svg" className={className} fill="none" viewBox="0 0 24 24" stroke="currentColor">
    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M19 11H5m14 0a2 2 0 012 2v6a2 2 0 01-2 2H5a2 2 0 01-2-2v-6a2 2 0 012-2m14 0V9a2 2 0 00-2-2M5 11V9a2 2 0 012-2m0 0V5a2 2 0 012-2h6a2 2 0 012 2v2M7 7h10" />
  </svg>
);

const CommentsIcon = ({ className }) => (
  <svg xmlns="http://www.w3.org/2000/svg" className={className} fill="none" viewBox="0 0 24 24" stroke="currentColor">
    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M7 8h10M7 12h4m1 8l-4-4H5a2 2 0 01-2-2V6a2 2 0 012-2h14a2 2 0 012 2v8a2 2 0 01-2 2h-3l-4 4z" />
  </svg>
);

// PropTypes
UsersIcon.propTypes = {
  className: PropTypes.string
};

DocumentsIcon.propTypes = {
  className: PropTypes.string
};

CommentsIcon.propTypes = {
  className: PropTypes.string
};

export default AdminPage;